package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;

// import java.io.*;
import rs.ac.bg.etf.pp1.ast.*;


parser code {:
	
	boolean errorDetected = false;
	public Symbol errSymbol;
	
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
    	errSymbol = cur_token;
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol){
            msg.append (" na liniji ").append(((Symbol)info).left);
            msg.append (" na liniji ").append(((Symbol)info).right);
            msg.append (" na liniji ").append(((Symbol)info).value);
        }
        log.error(msg.toString());
    }
    
    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.info(msg.toString());
    }
    
    public void report_error_on_err_token(String message){
        report_error(message, errSymbol);
    }
   
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

terminal PROGRAM, VOID, OP_LEFT_BRACE, OP_RIGHT_BRACE, OP_SEMICOLON, OP_LEFT_PAREN, OP_RIGHT_PAREN, 
OP_COMMA, PRINT, RETURN, OP_PLUS, OP_PLUSPLUS, OP_MINUSMINUS, OP_EQUALS, CLASS, ABSTRACT, OP_LEFT_SQUARE, OP_RIGHT_SQUARE,
CONST, EXTENDS, OP_OR, OP_AND, BREAK, CONTINUE, READ, NEW, FOR, OP_ASSIGN;
terminal OP_DOT, OP_MINUS, OP_MUL, OP_DIV, OP_MOD;
terminal OP_NOT_EQUALS, OP_GREATER_THAN, OP_GREATER_EQUAL, OP_LESS_THAN, OP_LESS_EQUAL;
terminal Integer NUM_CONST;
terminal Boolean BOOL_CONST;
terminal Character CHAR_CONST;
terminal String IDENT ;
terminal IF, ELSE;

nonterminal MethodDeclList, DeclList;
nonterminal FormalParamList, FormalParamDecl, FormPars, ActPars, ActualParamList, ForStmt, Addop, Mulop, Relop; 
nonterminal StatementList, Statement,
DesignatorStmt, DesignatorStmtOpt, CondStatementOpt, OneOrBlockStatement;
nonterminal CondStatement, CondTerm, CondFact, ElseStatement;

nonterminal Program, ProgName, Designator, MethodDecl, MethodTypeName, VarDeclBase;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Type; nonterminal rs.etf.pp1.symboltable.concepts.Struct Term; nonterminal rs.etf.pp1.symboltable.concepts.Struct Expr; nonterminal rs.etf.pp1.symboltable.concepts.Struct Factor;

nonterminal VarDeclList, VarDeclMul, VarDeclListOpt;
nonterminal ConstDeclChar, ConstDeclCharMul, ConstDeclNum, ConstDeclNumMul, ConstDeclBool, ConstDeclBoolMul, ConstDeclAny, ConstDecl; 

nonterminal ClassDecl, ClassMethodDeclList, AbsClassDecl, AbsClassMethodDeclList, AnyMethodDeclList, ExtendDecl, AbsMethodDecl;
nonterminal VarDeclListMul;


precedence left ELSE;

Program ::= (Program) PROGRAM ProgName:p DeclList OP_LEFT_BRACE MethodDeclList OP_RIGHT_BRACE 
;

ProgName ::= (ProgName) IDENT:pName 
;

DeclList ::= (DeclarationListConst) DeclList ConstDecl
			|
			 (DeclarationListVar) DeclList VarDeclList
			|
		     (DeclarationListAbs) DeclList AbsClassDecl
		    |
		     (DeclarationListClass) DeclList ClassDecl
		    |
		     (NoDeclList)
		     | 
		         (ListDeclError) error OP_SEMICOLON:line {: parser.report_error_on_err_token("list declaration error"); :}
		    ;	  

VarDeclListMul ::= (VarDeclarationListMulVar) VarDeclListMul VarDeclList
				| (NoVarDeclListMul);

VarDeclList ::= (VarDeclList)Type:varType VarDeclBase VarDeclMul OP_SEMICOLON;
				
VarDeclMul ::= (VarDeclarationMul) VarDeclMul OP_COMMA VarDeclBase
				| (NoVarDeclMul);
				
VarDeclBase ::= (VarDecl) IDENT:varName 
				|
				(VarDeclArr) IDENT:varName OP_LEFT_SQUARE OP_RIGHT_SQUARE
;

VarDeclListOpt ::= (VarDeclarationListOpt) VarDeclList
					| (NoVarDeclList);

ConstDeclChar ::= (ConstDeclarationChar) IDENT:cName OP_ASSIGN CHAR_CONST;
ConstDeclCharMul ::= (ConstDeclarationCharMul) ConstDeclCharMul OP_COMMA ConstDeclChar
					| (NoConstDeclCharMul);

ConstDeclNum ::= (ConstDeclarationNum) IDENT:cName OP_ASSIGN NUM_CONST;
ConstDeclNumMul ::= (ConstDeclarationNumMul) ConstDeclNumMul OP_COMMA ConstDeclNum
					| (NoConstDeclNumMul);
					
ConstDeclBool ::= (ConstDeclarationBool) IDENT:cName OP_ASSIGN BOOL_CONST;
ConstDeclBoolMul ::= (ConstDeclarationBoolMul) ConstDeclBoolMul OP_COMMA ConstDeclBool
					| (NoConstDeclBoolMul);
					
ConstDeclAny ::= (ConstDeclAnyBool) ConstDeclBool | (ConstDeclAnyNum) ConstDeclNum | (ConstDeclAnyChar) ConstDeclChar;

ConstDecl ::= (ConstDeclrChar) CONST Type:varType ConstDeclChar ConstDeclCharMul OP_SEMICOLON
			| (ConstDeclrNum) CONST Type:varType ConstDeclNum ConstDeclNumMul OP_SEMICOLON
			| (ConstDeclrBool) CONST Type:varType ConstDeclBool ConstDeclBoolMul OP_SEMICOLON;

ClassDecl ::= (ClassDeclaration) CLASS IDENT:ClassName ExtendDecl OP_LEFT_BRACE
				VarDeclList ClassMethodDeclList	OP_RIGHT_BRACE;
				
ClassMethodDeclList ::= (ClassMethodList) OP_LEFT_BRACE MethodDeclList OP_RIGHT_BRACE
				| (NoClassMethodList);
				
AbsClassDecl ::= (AbsClass) ABSTRACT CLASS IDENT:ClassName ExtendDecl 
				OP_LEFT_BRACE VarDeclList AbsClassMethodDeclList
				OP_RIGHT_BRACE;
					
AbsClassMethodDeclList ::= (AbsClassMethodList) OP_LEFT_BRACE AnyMethodDeclList OP_RIGHT_BRACE
				| (NoAbsClassMethodList);
				
ExtendDecl ::= (Extend) EXTENDS Type
				|
				(NoExtend);

Type ::= (Type) IDENT:typeName;

MethodDeclList ::= (MethodDeclarations) MethodDeclList MethodDecl
					|
					(NoMethodDecl)/* epsilon */
					;
					
AnyMethodDeclList ::= (AnyMethodDeclarations) AnyMethodDeclList MethodDecl
					|
					(AnyAbslMethodDeclarations) AnyMethodDeclList AbsMethodDecl
					|
					(NoAnyMethodDecl);

MethodDecl ::= (MethodDeclaration) MethodTypeName
			   OP_LEFT_PAREN FormPars OP_RIGHT_PAREN VarDeclListMul OP_LEFT_BRACE StatementList OP_RIGHT_BRACE 
			   	|		 (MethodDeclError) error {: parser.report_error_on_err_token("Error in method decl declaration"); :}
			   ;
			   
AbsMethodDecl ::= (AbsMethodDecl) ABSTRACT MethodTypeName
			   OP_LEFT_PAREN FormPars OP_RIGHT_PAREN OP_SEMICOLON;

MethodTypeName ::= (TypeMethodTypeName) Type:retType IDENT:methName
					| (VoidMethodTypeName) VOID IDENT: methName
;

FormPars ::= (FormParams) FormalParamList | (NoFormParam) /* epsilon */ ;

FormalParamList ::= (FormalParamDecls) FormalParamList OP_COMMA FormalParamDecl
					|
					(SingleFormalParamDecl) FormalParamDecl
					;
					
FormalParamDecl ::= (FormalParamSingle) Type IDENT
    |
    (FormalParamArray) Type IDENT OP_LEFT_SQUARE OP_RIGHT_SQUARE
    |
    (FormalParamError) error {: parser.report_error_on_err_token("Error in formal param declaration"); :}
    ;

StatementList ::= (Statements) StatementList Statement 
					|
				  (NoStmt) /* epsilon */
				  ;

Statement ::= (DesignatorStatement) DesignatorStmt OP_SEMICOLON
			  |
			  (ConditionStatement) IF OP_LEFT_PAREN CondStatement OP_RIGHT_PAREN OneOrBlockStatement ElseStatement
			  |
			  (ForStatement) ForStmt
			  |
			  (BreakStatement) BREAK OP_SEMICOLON
			  |
			  (ContinueStatement) CONTINUE OP_SEMICOLON
			  |
			  (ReturnStmt) RETURN OP_SEMICOLON
			  |
  			  (ReturnExpr) RETURN Expr OP_SEMICOLON
			  |
			  (PrintStmt) PRINT OP_LEFT_PAREN Expr OP_RIGHT_PAREN OP_SEMICOLON 
			  |
		      (ReadStatement) READ OP_LEFT_PAREN Designator OP_RIGHT_PAREN OP_SEMICOLON
		          |
			 (StatementError) error {: parser.report_error_on_err_token("Error in statement declaration"); :}
;

OneOrBlockStatement ::= (BlockStatement) OP_LEFT_BRACE StatementList OP_RIGHT_BRACE |
						(OneStatement) Statement;


Designator ::= (DesignatorBase) IDENT:name
			 | (DesignatorMember) Designator OP_DOT IDENT:member	
			 | (DesignatorIndex) Designator OP_LEFT_SQUARE Expr OP_RIGHT_SQUARE	
			 |
			 (DesignatorErr) error {: parser.report_error_on_err_token("Error in designator declaration"); :}
;

DesignatorStmt ::= (DesignatorStatementAssign) Designator OP_ASSIGN Expr
				| (DesignatorStatementFcall) Designator OP_LEFT_PAREN ActPars OP_RIGHT_PAREN
				| (DesignatorStmtPostinc) Designator OP_PLUSPLUS
				| (DesignatorStmtPostdec) Designator OP_MINUSMINUS
				| 			 (DesignatorStmtErr) error {: parser.report_error_on_err_token("Error in designator stmt declaration"); :}

;

DesignatorStmtOpt ::= (DesignatorStatementOptional) DesignatorStmt
					| (NoDesignatorStatement)
					;
					
ElseStatement ::= (ElseStmt) ELSE OneOrBlockStatement
				| (NoElseStmt);

CondStatement ::= (ConditionStmt) CondStatement OP_OR CondTerm
				| (CondBaseStatement) CondTerm;
				
CondTerm ::= (ConditionTerm) CondTerm OP_AND CondFact
			| (CondBaseTerm) CondFact;
			
CondFact ::= (CondFactSimple) Expr
			| (CondFactRelop) Expr Relop Expr;
			
CondStatementOpt ::= (CondStmtOpt) CondStatement
					| (NoCondStmt)
					;
			  
Expr ::= (ExprList) Expr Addop Term
	|
	(ExprTerm) Term
    |
    (ExprNegatedTerm) OP_MINUS Term
    
    ;
		 
		 

Term ::= (TermBase) Factor
    |
    (TermList) Term Mulop Factor
    ;

Factor ::= (FactorNum) NUM_CONST:numberFactor
		    |
		    (FactorChar) CHAR_CONST:charFactor
		    |
		    (FactorBool) BOOL_CONST:boolFactor
			|
			(FactorNew) NEW Type
			|
			(FactorNewArray) NEW Type OP_LEFT_SQUARE Expr OP_RIGHT_SQUARE
		    |
		    (FactorFuncCall) Designator:func OP_LEFT_PAREN ActPars OP_RIGHT_PAREN
		    |
	        (FactorDesignator) Designator
		    |
		    (FactorParen) OP_LEFT_PAREN Expr OP_RIGHT_PAREN
		    ;

ActPars ::= (ActualsPars) ActualParamList 
			| 
		    (NoActuals) /* epsilon */ 
		    ;
			   
ActualParamList ::= (ActualParams) ActualParamList OP_COMMA Expr
					|
					(ActualParam) Expr
					;

ForStmt ::= (ForStmtOne) FOR OP_LEFT_PAREN DesignatorStmtOpt OP_SEMICOLON 
					CondStatementOpt OP_SEMICOLON DesignatorStmtOpt OP_RIGHT_PAREN
					OneOrBlockStatement;

Addop ::= (Addopr) OP_PLUS | (Subopr) OP_MINUS     |
    (AddopError) error {: parser.report_error_on_err_token("Error in addop declaration"); :}
    ;
Mulop ::= (Mulopr) OP_MUL | (Divopr) OP_DIV | (Modopr) OP_MOD;

Relop ::= (RelopEq) OP_EQUALS
    |
    (RelopNeq) OP_NOT_EQUALS
    |
    (RelopGt) OP_GREATER_THAN
    |
    (RelopGteq) OP_GREATER_EQUAL
    |
    (RelopLt) OP_LESS_THAN
    |
    (RelopLeq) OP_LESS_EQUAL
    ;
