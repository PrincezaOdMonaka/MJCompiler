package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;

// import java.io.*;
import rs.ac.bg.etf.pp1.ast.*;


parser code {:
	
	boolean errorDetected = false;
	
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }
    
    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.info(msg.toString());
    }
    
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}


terminal PROGRAM, OP_LEFT_BRACE, OP_RIGHT_BRACE, OP_SEMICOLON, OP_LEFT_PAREN, OP_RIGHT_PAREN, COMMA, PRINT, RETURN, PLUS, EQUAL, VOID, CLASS, ABSTRACT;
terminal Integer NUM_CONST;
terminal Boolean BOOL_CONST;
terminal Character CHAR_CONST;
terminal String IDENT ;
terminal IF, ELSE;

nonterminal MethodDeclList, VarDecl;
nonterminal FormalParamList, FormalParamDecl, FormPars, ActualPars, ActualParamList; 
nonterminal StatementList, Statement, Addop;
nonterminal Unmatched, Matched;
nonterminal ExtendDecl, ClassDecl, AbstractClassDecl, AbstractMethodDecl, AnyMethodDecl, AnyMethod;

nonterminal rs.etf.pp1.symboltable.concepts.Obj Program, ProgName, Designator, MethodDecl, MethodTypeName; 
nonterminal rs.etf.pp1.symboltable.concepts.Struct Type, Term, Expr, Factor, VarDeclList; 

precedence left ELSE;

Program ::= (Program) PROGRAM ProgName:p DeclList OP_LEFT_BRACE MethodDeclList OP_RIGHT_BRACE 
;

ProgName ::= (ProgName) IDENT:pName 
;

DeclList ::= (DeclarationListConst) DeclList ConstDecl
			|
			 (DeclarationListVar) DeclList VarDecl
			|
		     (DeclarationListAbs) DeclList AbsClassDecl
		    |
		     (DeclarationListClass) DeclList ClassDecl
		    |
		     (NoDeclList);	  

VarDeclList ::= (VarDeclaratioList)Type:varType VarDeclBase VarDeclMul OP_SEMICOLON;
				
VarDeclMul ::= (VarDeclarationMul) VarDeclMul OP_COMMA VarDeclBase
				| (NoVarDeclMul);
				
VarDeclBase ::= (VarDecl) IDENT:varName 
				|
				(VarDeclArr) IDENT:varName OP_LEFT_SQUARE OP_RIGHT_SQUARE
;

ConstDeclChar ::= (ConstDeclarationChar) IDENT:cName OP_EQUALS CHAR_CONST;
ConstDeclCharMul ::= (ConstDeclarationCharMul) ConstDeclCharMul OP_COMMA ConstDeclChar
					| (NoConstDeclCharMul);

ConstDeclNum ::= (ConstDeclarationChar) IDENT:cName OP_EQUALS NUM_CONST;
ConstDeclNumMul ::= (ConstDeclarationNumMul) ConstDeclNumMul OP_COMMA ConstDeclNum
					| (NoConstDeclNumMul);
					
ConstDeclBool ::= (ConstDeclarationBool) IDENT:cName OP_EQUALS BOOL_CONST;
ConstDeclBoolMul ::= (ConstDeclarationBoolMul) ConstDeclBoolMul OP_COMMA ConstDeclBool
					| (NoConstDeclBoolMul);
					
ConstDeclAny ::= (ConstDeclAnyBool) ConstDeclBool | (ConstDeclAnyNum) ConstDeclNum | (ConstDeclAnyChar) ConstDeclChar;

ConstDecl ::= (ConstDeclChar) CONST Type:varType ConstDeclChar ConstDeclCharMul OP_SEMICOLON
			| (ConstDeclNum) CONST Type:varType ConstDeclNum ConstDeclNumMul OP_SEMICOLON
			| (ConstDeclBool) CONST Type:varType ConstDeclBool ConstDeclBoolMul OP_SEMICOLON

ClassDecl ::= (Class) CLASS IDENT:ClassName ExtendDecl OP_LEFT_BRACE
				VarDeclList ClassMethodDeclList	OP_RIGHT_BRACE;
				
ClassMethodDeclList ::= (ClassMethodList) OP_LEFT_BRACE MethodDeclList OP_RIGHT_BRACE
				| (NoClassMethodList);
				
AbsClassDecl ::= (AbsClass) ABSTRACT CLASS IDENT:ClassName ExtendDecl 
				OP_LEFT_BRACE VarDeclList AbsClassMethodDeclList
				OP_RIGHT_BRACE;
					
AbsClassMethodDeclList ::= (AbsClassMethodList) OP_LEFT_BRACE AnyMethodDeclList OP_RIGHT_BRACE
				| (NoAbsClassMethodList);
				
ExtendDecl ::= (Extend) EXTENDS Type
				|
				(NoExtend);

Type ::= (Type) IDENT:typeName;
;

MethodDeclList ::= (MethodDeclarations) MethodDeclList MethodDecl
					|
					(NoMethodDecl)/* epsilon */
					;
					
AnyMethodDeclList ::= (AnyMethodDeclarations) AnyMethodDeclList MethodDecl
					|
					(AnyAbslMethodDeclarations) AnyMethodDeclList AbsMethodDecl
					|
					(NoMethodDecl);

MethodDecl ::= (MethodDecl) MethodTypeName
			   OP_LEFT_PAREN FormPars OP_RIGHT_PAREN VarDeclList OP_LEFT_BRACE StatementList OP_RIGHT_BRACE 
			   ;
			   
AbsMethodDecl ::= (AbsMethodDecl) ABSTRACT MethodTypeName
			   OP_LEFT_PAREN FormPars OP_RIGHT_PAREN OP_LEFT_BRACE StatementList OP_RIGHT_BRACE 
			   ;

MethodTypeName ::= (MethodTypeName) Type:retType IDENT:methName
;

FormPars ::= (FormParams) FormalParamList | (NoFormParam) /* epsilon */ ;

FormalParamList ::= (FormalParamDecls) FormalParamList COMMA FormalParamDecl
					|
					(SingleFormalParamDecl) FormalParamDecl
					;
					
FormalParamDecl ::= (FormalParamDecl) Type IDENT ;

StatementList ::= (Statements) StatementList Statement 
					|
				  (NoStmt) /* epsilon */
				  ;

Statement ::= (DesignatorStatement) DesignatorStmt OP_SEMICOLON
			  |
			  (ConditionStatement) CondStatement
			  |
			  (ForStatement) ForStmt
			  |
			  (BreakStatement) BREAK OP_SEMICOLON
			  |
			  (ContinueStatement) CONTINUE OP_SEMICOLON
			  |
  			  (ReturnExpr) RETURN Expr:t OP_SEMICOLON
			  |
			  (PrintStmt) PRINT OP_LEFT_PAREN Expr OP_RIGHT_PAREN OP_SEMICOLON 
			  |
		      (ReadStatement) READ OP_LEFT_PAREN DesignatorBase OP_RIGHT_PAREN OP_SEMICOLON
;

Designator ::= (DesignatorBase) IDENT:name
			 | (DesignatorMember) Designator OP_DOT IDENT:member	
			 | (DesignatorIndex) Designator OP_LEFT_SQUARE Expr OP_RIGHT_SQUARE	
;

DesignatorStmt ::= (DesignatorStatementAssign) Designator OP_EQUALS Expr
				| (DesignatorStatementFcall) Designator OP_LEFT_PAREN ActPars OP_RIGHT_PAREN
				| (DesignatorStatementPostinc) Designator OP_PLUS OP_PLUS
				| (DesignatorStatementPostdec) Designator OP_MINUS OP_MINUS
;

DesignatorStmtOpt :: = (DesignatorStatementOptional) DesignatorStmt
					| (NoDesignatorStatement)
					;

CondStatement ::= (ConditionStatement) CondStatement OP_OR OP_OR CondTerm
				| (CondBaseStatement) CondTerm;
				
CondTerm ::= (ConditionTerm) CondTerm OP_AND OP_AND CondFact
			| (CondBaseTerm) CondFact;
			
CondFact ::= (CondFactSimple) Expr
			| (CondFactRelop) Expr Relop Expr;
			
CondStatementOpt ::= (CondStmtOpt) ContStatement
					| (NoCondStmt)
					;
			  
Expr ::= (NegativeExpr) OP_MINUS Expr:te
		 |
		 (AddExpr) Expr:te Addop Term:t
		 |
		 (TermExpr) Term:t
		 ;

Term ::= (Term) Term:t Mulop Factor:f | (BaseTerm) Factor:f 
;

Factor ::= (FactorConst) ConstDeclAny
			|
			(FactorNew) NEW Type
			|
			(FactorNewArray) NEW Type OP_LEFT_SQUARE Expr OP_RIGHT_SQUARE
		    |
		    (FactorFuncCall) Designator:func OP_LEFT_PAREN ActualPars OP_RIGHT_PAREN
		    |
		    (FactorParen) OP_LEFT_BRACE Expr OP_RIGHT_BRACE
		    ;

ActPars ::= (ActualsPars) ActualParamList 
			| 
		    (NoActuals) /* epsilon */ 
		    ;
			   
ActualParamList ::= (ActualParams) ActualParamList COMMA Expr
					|
					(ActualParam) Expr
					;

ForStmt ::= (ForStmt) FOR OP_LEFT_BRACE DesignatorStmtOpt OP_SEMI 
					ContStatementOpt OP_SEMI DesignatorStmtOpt OP_RIGHT_BRACE
					Statement
					;

Addop ::= (Addopr) OP_PLUS | (Subopr) OP_MINUS ;
Mulop ::= (Mulopr) OP_MUL | (Divopr) OP_DIV | (Modopr) OP_MOD;
