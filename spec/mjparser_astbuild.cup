package rs.ac.bg.etf.pp1;

import rs.etf.pp1.symboltable.*;
import java_cup.runtime.*;
import org.apache.log4j.*;

// import java.io.*;
import rs.ac.bg.etf.pp1.ast.*;


parser code {:
	
	boolean errorDetected = false;
	public Symbol errSymbol;
	
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
    	errSymbol = cur_token;
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol){
            msg.append (" na liniji ").append(((Symbol)info).left);
            msg.append (" na liniji ").append(((Symbol)info).right);
            msg.append (" na liniji ").append(((Symbol)info).value);
        }
        log.error(msg.toString());
    }
    
    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.info(msg.toString());
    }
    
    public void report_error_on_err_token(String message){
        report_error(message, errSymbol);
    }
   
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

terminal PROGRAM, VOID, OP_LEFT_BRACE, OP_RIGHT_BRACE, OP_SEMICOLON, OP_LEFT_PAREN, OP_RIGHT_PAREN, 
OP_COMMA, PRINT, RETURN, OP_PLUS, OP_PLUSPLUS, OP_MINUSMINUS, OP_EQUALS, CLASS, ABSTRACT, OP_LEFT_SQUARE, OP_RIGHT_SQUARE,
CONST, EXTENDS, OP_OR, OP_AND, BREAK, CONTINUE, READ, NEW, FOR, OP_ASSIGN;
terminal OP_DOT, OP_MINUS, OP_MUL, OP_DIV, OP_MOD;
terminal OP_NOT_EQUALS, OP_GREATER_THAN, OP_GREATER_EQUAL, OP_LESS_THAN, OP_LESS_EQUAL;
terminal Integer NUM_CONST;
terminal Boolean BOOL_CONST;
terminal Character CHAR_CONST;
terminal String IDENT ;
terminal IF, ELSE;

nonterminal MethodDeclList MethodDeclList;
nonterminal DeclList DeclList;
nonterminal FormalParamList FormalParamList;
nonterminal FormalParamDecl FormalParamDecl;
nonterminal FormParams FormParams;
nonterminal ActPars ActPars;
nonterminal ActualParamList ActualParamList;
nonterminal ForStmt ForStmt;
nonterminal Addop Addop;
nonterminal Mulop Mulop;
nonterminal Relop Relop; 
nonterminal StatementList StatementList;
nonterminal Statement Statement;
nonterminal
DesignatorStmt DesignatorStmt;
nonterminal DesignatorStmtOpt DesignatorStmtOpt;
nonterminal CondStatementOpt CondStatementOpt;
nonterminal OneOrBlockStatement OneOrBlockStatement;
nonterminal CondStatement CondStatement;
nonterminal CondTerm CondTerm;
nonterminal CondFact CondFact;
nonterminal ElseStatement ElseStatement;

nonterminal Designator Designator;
nonterminal VarDeclBase VarDeclBase;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Type; 
nonterminal rs.etf.pp1.symboltable.concepts.Struct Term;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Expr;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Factor;

nonterminal rs.etf.pp1.symboltable.concepts.Obj Program, ProgName, 
      MethodDecl, MethodTypeName;

nonterminal VarDeclList VarDeclList;
nonterminal VarDeclMul VarDeclMul;
nonterminal VarDeclListOpt VarDeclListOpt;
nonterminal rs.etf.pp1.symboltable.concepts.Obj ConstDeclChar, 
	ConstDeclCharMul, ConstDeclNum, ConstDeclNumMul, 
	ConstDeclBool, ConstDeclBoolMul, ConstDeclAny, ConstDecl; 

nonterminal rs.etf.pp1.symboltable.concepts.Obj 
	ClassDecl, AbsClassDecl;
	
nonterminal rs.etf.pp1.symboltable.concepts.Obj 	
	CName, ACName;

nonterminal ClassMethodDeclList ClassMethodDeclList;
nonterminal AbsClassMethodDeclList AbsClassMethodDeclList;
nonterminal AnyMethodDeclList AnyMethodDeclList;
nonterminal ExtendDecl ExtendDecl;
nonterminal AbsMethodDecl AbsMethodDecl;
nonterminal VarDeclListMul VarDeclListMul;

precedence left ELSE;

Program ::= (Program) PROGRAM ProgName:p DeclList:D1 OP_LEFT_BRACE MethodDeclList:M2 OP_RIGHT_BRACE {: RESULT=new Program(p, D1, M2); RESULT.setLine(pleft); :} 
;

ProgName ::= (ProgName) IDENT:pName {: RESULT=new ProgName(pName); RESULT.setLine(pNameleft); :} 
;

DeclList ::= (DeclarationListConst) DeclList:D1 ConstDecl:C2 {: RESULT=new DeclarationListConst(D1, C2); RESULT.setLine(D1left); :}
			|
			 (DeclarationListVar) DeclList:D1 VarDeclList:V2 {: RESULT=new DeclarationListVar(D1, V2); RESULT.setLine(D1left); :}
			|
		     (DeclarationListAbs) DeclList:D1 AbsClassDecl:A2 {: RESULT=new DeclarationListAbs(D1, A2); RESULT.setLine(D1left); :}
		    |
		     (DeclarationListClass) DeclList:D1 ClassDecl:C2 {: RESULT=new DeclarationListClass(D1, C2); RESULT.setLine(D1left); :}
		    |
		     (NoDeclList) {: RESULT=new NoDeclList(); :}
		     | 
		         (ListDeclError) error OP_SEMICOLON:line {: parser.report_error_on_err_token("list declaration error"); :} {: RESULT=new ListDeclError(); :}
		    ;	  

VarDeclListMul ::= (VarDeclarationListMulVar) VarDeclListMul:V1 VarDeclList:V2 {: RESULT=new VarDeclarationListMulVar(V1, V2); RESULT.setLine(V1left); :}
				| (NoVarDeclListMul) {: RESULT=new NoVarDeclListMul(); :};
				
VarDeclMul ::= (VarDeclarationMul) VarDeclMul:V1 OP_COMMA VarDeclBase:V2 {: RESULT=new VarDeclarationMul(V1, V2); RESULT.setLine(V1left); :}
				| (NoVarDeclMul) {: RESULT=new NoVarDeclMul(); :};

VarDeclList ::= (VarDeclList)Type:varType VarDeclBase:V1 VarDeclMul:V2 OP_SEMICOLON {: RESULT=new VarDeclList(varType, V1, V2); RESULT.setLine(varTypeleft); :};
				
VarDeclBase ::= (VarDecl) IDENT:varName {: RESULT=new VarDecl(varName); RESULT.setLine(varNameleft); :} 
				|
				(VarDeclArr) IDENT:varName OP_LEFT_SQUARE OP_RIGHT_SQUARE {: RESULT=new VarDeclArr(varName); RESULT.setLine(varNameleft); :}
;

VarDeclListOpt ::= (VarDeclarationListOpt) VarDeclList:V1 {: RESULT=new VarDeclarationListOpt(V1); RESULT.setLine(V1left); :}
					| (NoVarDeclList) {: RESULT=new NoVarDeclList(); :};

ConstDeclChar ::= (ConstDeclarationChar) IDENT:cName OP_ASSIGN CHAR_CONST:cVal {: RESULT=new ConstDeclarationChar(cName, cVal); RESULT.setLine(cNameleft); :};
ConstDeclCharMul ::= (ConstDeclarationCharMul) ConstDeclCharMul:C1 OP_COMMA ConstDeclChar:C2 {: RESULT=new ConstDeclarationCharMul(C1, C2); RESULT.setLine(C1left); :}
					| (NoConstDeclCharMul) {: RESULT=new NoConstDeclCharMul(); :};

ConstDeclNum ::= (ConstDeclarationNum) IDENT:cName OP_ASSIGN NUM_CONST:cVal {: RESULT=new ConstDeclarationNum(cName, cVal); RESULT.setLine(cNameleft); :};
ConstDeclNumMul ::= (ConstDeclarationNumMul) ConstDeclNumMul:C1 OP_COMMA ConstDeclNum:C2 {: RESULT=new ConstDeclarationNumMul(C1, C2); RESULT.setLine(C1left); :}
					| (NoConstDeclNumMul) {: RESULT=new NoConstDeclNumMul(); :};
					
ConstDeclBool ::= (ConstDeclarationBool) IDENT:cName OP_ASSIGN BOOL_CONST:cVal {: RESULT=new ConstDeclarationBool(cName, cVal); RESULT.setLine(cNameleft); :};
ConstDeclBoolMul ::= (ConstDeclarationBoolMul) ConstDeclBoolMul:C1 OP_COMMA ConstDeclBool:C2 {: RESULT=new ConstDeclarationBoolMul(C1, C2); RESULT.setLine(C1left); :}
					| (NoConstDeclBoolMul) {: RESULT=new NoConstDeclBoolMul(); :};
					
ConstDeclAny ::= (ConstDeclAnyBool) ConstDeclBool:C1 {: RESULT=new ConstDeclAnyBool(C1); RESULT.setLine(C1left); :} | (ConstDeclAnyNum) ConstDeclNum:C1 {: RESULT=new ConstDeclAnyNum(C1); RESULT.setLine(C1left); :} | (ConstDeclAnyChar) ConstDeclChar:C1 {: RESULT=new ConstDeclAnyChar(C1); RESULT.setLine(C1left); :};

ConstDecl ::= (ConstDeclrChar) CONST Type:varType ConstDeclChar:C1 ConstDeclCharMul:C2 OP_SEMICOLON {: RESULT=new ConstDeclrChar(varType, C1, C2); RESULT.setLine(varTypeleft); :}
			| (ConstDeclrNum) CONST Type:varType ConstDeclNum:C1 ConstDeclNumMul:C2 OP_SEMICOLON {: RESULT=new ConstDeclrNum(varType, C1, C2); RESULT.setLine(varTypeleft); :}
			| (ConstDeclrBool) CONST Type:varType ConstDeclBool:C1 ConstDeclBoolMul:C2 OP_SEMICOLON {: RESULT=new ConstDeclrBool(varType, C1, C2); RESULT.setLine(varTypeleft); :};

CName ::= (ClassName) IDENT:cName {: RESULT=new ClassName(cName); RESULT.setLine(cNameleft); :};
ACName ::= (AbsClassName) IDENT:cName {: RESULT=new AbsClassName(cName); RESULT.setLine(cNameleft); :};

ClassDecl ::= (ClassDeclaration) CLASS CName:ClassName ExtendDecl:E1 OP_LEFT_BRACE
				VarDeclList:V2 ClassMethodDeclList:C3	OP_RIGHT_BRACE {: RESULT=new ClassDeclaration(ClassName, E1, V2, C3); RESULT.setLine(ClassNameleft); :};
				
ClassMethodDeclList ::= (ClassMethodList) OP_LEFT_BRACE MethodDeclList:M1 OP_RIGHT_BRACE {: RESULT=new ClassMethodList(M1); RESULT.setLine(M1left); :}
				| (NoClassMethodList) {: RESULT=new NoClassMethodList(); :};
				
AbsClassDecl ::= (AbsClass) ABSTRACT CLASS ACName:ClassName ExtendDecl:E1 
				OP_LEFT_BRACE VarDeclList:V2 AbsClassMethodDeclList:A3
				OP_RIGHT_BRACE {: RESULT=new AbsClass(ClassName, E1, V2, A3); RESULT.setLine(ClassNameleft); :};
					
AbsClassMethodDeclList ::= (AbsClassMethodList) OP_LEFT_BRACE AnyMethodDeclList:A1 OP_RIGHT_BRACE {: RESULT=new AbsClassMethodList(A1); RESULT.setLine(A1left); :}
				| (NoAbsClassMethodList) {: RESULT=new NoAbsClassMethodList(); :};
				
ExtendDecl ::= (Extend) EXTENDS Type:T1 {: RESULT=new Extend(T1); RESULT.setLine(T1left); :}
				|
				(NoExtend) {: RESULT=new NoExtend(); :};

Type ::= (Type) IDENT:typeName {: RESULT=new Type(typeName); RESULT.setLine(typeNameleft); :};

MethodDeclList ::= (MethodDeclarations) MethodDeclList:M1 MethodDecl:M2 {: RESULT=new MethodDeclarations(M1, M2); RESULT.setLine(M1left); :}
					|
					(NoMethodDecl) {: RESULT=new NoMethodDecl(); :}/* epsilon */
					;
					
AnyMethodDeclList ::= (AnyMethodDeclarations) AnyMethodDeclList:A1 MethodDecl:M2 {: RESULT=new AnyMethodDeclarations(A1, M2); RESULT.setLine(A1left); :}
					|
					(AnyAbslMethodDeclarations) AnyMethodDeclList:A1 AbsMethodDecl:A2 {: RESULT=new AnyAbslMethodDeclarations(A1, A2); RESULT.setLine(A1left); :}
					|
					(NoAnyMethodDecl) {: RESULT=new NoAnyMethodDecl(); :};

MethodDecl ::= (MethodDeclaration) MethodTypeName:typeName
			   OP_LEFT_PAREN FormParams:F1 OP_RIGHT_PAREN VarDeclListMul:V2 OP_LEFT_BRACE StatementList:S3 OP_RIGHT_BRACE {: RESULT=new MethodDeclaration(typeName, F1, V2, S3); RESULT.setLine(typeNameleft); :} 
			   	|		 (MethodDeclError) error {: parser.report_error_on_err_token("Error in method decl declaration"); :} {: RESULT=new MethodDeclError(); :}
			   ;
			   
AbsMethodDecl ::= (AbsMethodDecl) ABSTRACT MethodTypeName:typeName
			   OP_LEFT_PAREN FormParams:F1 OP_RIGHT_PAREN OP_SEMICOLON {: RESULT=new AbsMethodDecl(typeName, F1); RESULT.setLine(typeNameleft); :};

MethodTypeName ::= (TypeMethodTypeName) Type:retType IDENT:methName {: RESULT=new TypeMethodTypeName(retType, methName); RESULT.setLine(retTypeleft); :}
					| (VoidMethodTypeName) VOID:retType IDENT:methName {: RESULT=new VoidMethodTypeName(methName); RESULT.setLine(methNameleft); :}
;

FormParams ::= (FormalParams) FormalParamList:F1 {: RESULT=new FormalParams(F1); RESULT.setLine(F1left); :} | (NoFormParam) {: RESULT=new NoFormParam(); :} /* epsilon */ ;

FormalParamList ::= (FormalParamDecls) FormalParamList:F1 OP_COMMA FormalParamDecl:F2 {: RESULT=new FormalParamDecls(F1, F2); RESULT.setLine(F1left); :}
					|
					(SingleFormalParamDecl) FormalParamDecl:F1 {: RESULT=new SingleFormalParamDecl(F1); RESULT.setLine(F1left); :}
					;
					
FormalParamDecl ::= (FormalParamVar) Type:paramType IDENT:paramId {: RESULT=new FormalParamVar(paramType, paramId); RESULT.setLine(paramTypeleft); :}
    |
    (FormalParamArr) Type:paramType IDENT:paramId OP_LEFT_SQUARE OP_RIGHT_SQUARE {: RESULT=new FormalParamArr(paramType, paramId); RESULT.setLine(paramTypeleft); :}
    |
    (FormalParamError) error {: parser.report_error_on_err_token("Error in formal param declaration"); :} {: RESULT=new FormalParamError(); :}
    ;

StatementList ::= (Statements) StatementList:S1 Statement:S2 {: RESULT=new Statements(S1, S2); RESULT.setLine(S1left); :} 
					|
				  (NoStmt) {: RESULT=new NoStmt(); :} /* epsilon */
				  ;

Statement ::= (DesignatorStatement) DesignatorStmt:D1 OP_SEMICOLON {: RESULT=new DesignatorStatement(D1); RESULT.setLine(D1left); :}
			  |
			  (ConditionStatement) IF OP_LEFT_PAREN CondStatement:C1 OP_RIGHT_PAREN OneOrBlockStatement:O2 ElseStatement:E3 {: RESULT=new ConditionStatement(C1, O2, E3); RESULT.setLine(C1left); :}
			  |
			  (ForStatement) ForStmt:F1 {: RESULT=new ForStatement(F1); RESULT.setLine(F1left); :}
			  |
			  (BreakStatement) BREAK OP_SEMICOLON {: RESULT=new BreakStatement(); :}
			  |
			  (ContinueStatement) CONTINUE OP_SEMICOLON {: RESULT=new ContinueStatement(); :}
			  |
			  (ReturnStmt) RETURN OP_SEMICOLON {: RESULT=new ReturnStmt(); :}
			  |
  			  (ReturnExpr) RETURN Expr:E1 OP_SEMICOLON {: RESULT=new ReturnExpr(E1); RESULT.setLine(E1left); :}
			  |
			  (PrintStmt) PRINT OP_LEFT_PAREN Expr:E1 OP_RIGHT_PAREN OP_SEMICOLON {: RESULT=new PrintStmt(E1); RESULT.setLine(E1left); :} 
			  |
		      (ReadStatement) READ OP_LEFT_PAREN Designator:D1 OP_RIGHT_PAREN OP_SEMICOLON {: RESULT=new ReadStatement(D1); RESULT.setLine(D1left); :}
		          |
			 (StatementError) error {: parser.report_error_on_err_token("Error in statement declaration"); :} {: RESULT=new StatementError(); :}
;

OneOrBlockStatement ::= (BlockStatement) OP_LEFT_BRACE StatementList:S1 OP_RIGHT_BRACE {: RESULT=new BlockStatement(S1); RESULT.setLine(S1left); :} |
						(OneStatement) Statement:S1 {: RESULT=new OneStatement(S1); RESULT.setLine(S1left); :};


Designator ::= (DesignatorBase) IDENT:name {: RESULT=new DesignatorBase(name); RESULT.setLine(nameleft); :}
			 | (DesignatorMember) Designator:D1 OP_DOT IDENT:member {: RESULT=new DesignatorMember(D1, member); RESULT.setLine(D1left); :}	
			 | (DesignatorIndex) Designator:D1 OP_LEFT_SQUARE Expr:E2 OP_RIGHT_SQUARE {: RESULT=new DesignatorIndex(D1, E2); RESULT.setLine(D1left); :}	
			 |
			 (DesignatorErr) error {: parser.report_error_on_err_token("Error in designator declaration"); :} {: RESULT=new DesignatorErr(); :}
;

DesignatorStmt ::= (DesignatorStatementAssign) Designator:D1 OP_ASSIGN Expr:E2 {: RESULT=new DesignatorStatementAssign(D1, E2); RESULT.setLine(D1left); :}
				| (DesignatorStatementFcall) Designator:D1 OP_LEFT_PAREN ActPars:A2 OP_RIGHT_PAREN {: RESULT=new DesignatorStatementFcall(D1, A2); RESULT.setLine(D1left); :}
				| (DesignatorStmtPostinc) Designator:D1 OP_PLUSPLUS {: RESULT=new DesignatorStmtPostinc(D1); RESULT.setLine(D1left); :}
				| (DesignatorStmtPostdec) Designator:D1 OP_MINUSMINUS {: RESULT=new DesignatorStmtPostdec(D1); RESULT.setLine(D1left); :}
				| 			 (DesignatorStmtErr) error {: parser.report_error_on_err_token("Error in designator stmt declaration"); :} {: RESULT=new DesignatorStmtErr(); :}

;

DesignatorStmtOpt ::= (DesignatorStatementOptional) DesignatorStmt:D1 {: RESULT=new DesignatorStatementOptional(D1); RESULT.setLine(D1left); :}
					| (NoDesignatorStatement) {: RESULT=new NoDesignatorStatement(); :}
					;
					
ElseStatement ::= (ElseStmt) ELSE OneOrBlockStatement:O1 {: RESULT=new ElseStmt(O1); RESULT.setLine(O1left); :}
				| (NoElseStmt) {: RESULT=new NoElseStmt(); :};

CondStatement ::= (ConditionStmt) CondStatement:C1 OP_OR CondTerm:C2 {: RESULT=new ConditionStmt(C1, C2); RESULT.setLine(C1left); :}
				| (CondBaseStatement) CondTerm:C1 {: RESULT=new CondBaseStatement(C1); RESULT.setLine(C1left); :};
				
CondTerm ::= (ConditionTerm) CondTerm:C1 OP_AND CondFact:C2 {: RESULT=new ConditionTerm(C1, C2); RESULT.setLine(C1left); :}
			| (CondBaseTerm) CondFact:C1 {: RESULT=new CondBaseTerm(C1); RESULT.setLine(C1left); :};
			
CondFact ::= (CondFactSimple) Expr:E1 {: RESULT=new CondFactSimple(E1); RESULT.setLine(E1left); :}
			| (CondFactRelop) Expr:E1 Relop:R2 Expr:E3 {: RESULT=new CondFactRelop(E1, R2, E3); RESULT.setLine(E1left); :};
			
CondStatementOpt ::= (CondStmtOpt) CondStatement:C1 {: RESULT=new CondStmtOpt(C1); RESULT.setLine(C1left); :}
					| (NoCondStmt) {: RESULT=new NoCondStmt(); :}
					;
			  
Expr ::= (ExprList) Expr:E1 Addop:A2 Term:T3 {: RESULT=new ExprList(E1, A2, T3); RESULT.setLine(E1left); :}
	|
	(ExprTerm) Term:T1 {: RESULT=new ExprTerm(T1); RESULT.setLine(T1left); :}
    |
    (ExprNegatedTerm) OP_MINUS Term:T1 {: RESULT=new ExprNegatedTerm(T1); RESULT.setLine(T1left); :}
    
    ;
		 
		 

Term ::= (TermBase) Factor:F1 {: RESULT=new TermBase(F1); RESULT.setLine(F1left); :}
    |
    (TermList) Term:T1 Mulop:M2 Factor:F3 {: RESULT=new TermList(T1, M2, F3); RESULT.setLine(T1left); :}
    ;

Factor ::= (FactorNum) NUM_CONST:numberFactor {: RESULT=new FactorNum(numberFactor); RESULT.setLine(numberFactorleft); :}
		    |
		    (FactorChar) CHAR_CONST:charFactor {: RESULT=new FactorChar(charFactor); RESULT.setLine(charFactorleft); :}
		    |
		    (FactorBool) BOOL_CONST:boolFactor {: RESULT=new FactorBool(boolFactor); RESULT.setLine(boolFactorleft); :}
			|
			(FactorNew) NEW Type:T1 {: RESULT=new FactorNew(T1); RESULT.setLine(T1left); :}
			|
			(FactorNewArray) NEW Type:T1 OP_LEFT_SQUARE Expr:E2 OP_RIGHT_SQUARE {: RESULT=new FactorNewArray(T1, E2); RESULT.setLine(T1left); :}
		    |
		    (FactorFuncCall) Designator:func OP_LEFT_PAREN ActPars:A1 OP_RIGHT_PAREN {: RESULT=new FactorFuncCall(func, A1); RESULT.setLine(funcleft); :}
		    |
	        (FactorDesignator) Designator:D1 {: RESULT=new FactorDesignator(D1); RESULT.setLine(D1left); :}
		    |
		    (FactorParen) OP_LEFT_PAREN Expr:E1 OP_RIGHT_PAREN {: RESULT=new FactorParen(E1); RESULT.setLine(E1left); :}
		    ;

ActPars ::= (ActualsPars) ActualParamList:A1 {: RESULT=new ActualsPars(A1); RESULT.setLine(A1left); :} 
			| 
		    (NoActuals) {: RESULT=new NoActuals(); :} /* epsilon */ 
		    ;
			   
ActualParamList ::= (ActualParams) ActualParamList:A1 OP_COMMA Expr:E2 {: RESULT=new ActualParams(A1, E2); RESULT.setLine(A1left); :}
					|
					(ActualParam) Expr:E1 {: RESULT=new ActualParam(E1); RESULT.setLine(E1left); :}
					;

ForStmt ::= (ForStmtOne) FOR OP_LEFT_PAREN DesignatorStmtOpt:D1 OP_SEMICOLON 
					CondStatementOpt:C2 OP_SEMICOLON DesignatorStmtOpt:D3 OP_RIGHT_PAREN
					OneOrBlockStatement:O4 {: RESULT=new ForStmtOne(D1, C2, D3, O4); RESULT.setLine(D1left); :};

Addop ::= (Addopr) OP_PLUS {: RESULT=new Addopr(); :} | (Subopr) OP_MINUS {: RESULT=new Subopr(); :}     |
    (AddopError) error {: parser.report_error_on_err_token("Error in addop declaration"); :} {: RESULT=new AddopError(); :}
    ;
Mulop ::= (Mulopr) OP_MUL {: RESULT=new Mulopr(); :} | (Divopr) OP_DIV {: RESULT=new Divopr(); :} | (Modopr) OP_MOD {: RESULT=new Modopr(); :};

Relop ::= (RelopEq) OP_EQUALS {: RESULT=new RelopEq(); :}
    |
    (RelopNeq) OP_NOT_EQUALS {: RESULT=new RelopNeq(); :}
    |
    (RelopGt) OP_GREATER_THAN {: RESULT=new RelopGt(); :}
    |
    (RelopGteq) OP_GREATER_EQUAL {: RESULT=new RelopGteq(); :}
    |
    (RelopLt) OP_LESS_THAN {: RESULT=new RelopLt(); :}
    |
    (RelopLeq) OP_LESS_EQUAL {: RESULT=new RelopLeq(); :}
    ;
